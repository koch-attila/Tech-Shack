openapi: 3.0.3
info:
  title: Tech-Shack API
  version: 1.0.0
  description: |
    Tech-Shack REST API for user authentication, product browsing, cart, and order management.
    Supports Hungarian address and phone validation, multi-domain session handling, and Sanctum CSRF protection.
servers:
  - url: http://backend.vm1.test/api
    description: Main API server
  - url: http://backend.vm2.test/api
    description: Alternate domain
tags:
  - name: Auth
    description: User authentication and session
  - name: Products
    description: Product listing
  - name: Orders
    description: Cart and order management
  - name: CSRF
    description: CSRF protection
  - name: User
    description: User profile
  - name: Admin
    description: Admin operations

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, password_confirmation]
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: secret123
                password_confirmation:
                  type: string
                  format: password
                  example: secret123
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation error

  /auth/login:
    post:
      tags: [Auth]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: secret123
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout user
      responses:
        '204':
          description: Logged out

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user
      security:
        - sanctumAuth: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated

  /products:
    get:
      tags: [Products]
      summary: List products
      responses:
        '200':
          description: Product list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /orders:
    post:
      tags: [Orders]
      summary: Place an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '422':
          description: Validation error

    get:
      tags: [Orders]
      summary: List user's orders
      security:
        - sanctumAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /sanctum/csrf-cookie:
    get:
      tags: [CSRF]
      summary: Get CSRF cookie for SPA authentication
      responses:
        '204':
          description: CSRF cookie set

  /admin/products:
    get:
      tags: [Admin, Products]
      summary: List all products (admin)
      security:
        - sanctumAuth: []
      responses:
        '200':
          description: Product list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags: [Admin, Products]
      summary: Create product (admin)
      security:
        - sanctumAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /admin/products/{id}:
    put:
      tags: [Admin, Products]
      summary: Update product (admin)
      security:
        - sanctumAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags: [Admin, Products]
      summary: Delete product (admin)
      security:
        - sanctumAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted

  /admin/orders:
    get:
      tags: [Admin, Orders]
      summary: List all orders (admin)
      security:
        - sanctumAuth: []
      responses:
        '200':
          description: Order list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /admin/users:
    get:
      tags: [Admin, Users]
      summary: List all users (admin)
      security:
        - sanctumAuth: []
      responses:
        '200':
          description: User list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  # ...add other admin endpoints as needed...

components:
  securitySchemes:
    sanctumAuth:
      type: apiKey
      in: cookie
      name: tech_shack_session

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        delivery_address:
          type: string
        delivery_city:
          type: string
        delivery_postal_code:
          type: string
        billing_address:
          type: string
        billing_city:
          type: string
        billing_postal_code:
          type: string
        phone:
          type: string

    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer

    OrderRequest:
      type: object
      required:
        - name
        - email
        - delivery_address
        - delivery_city
        - delivery_postal_code
        - billing_address
        - billing_city
        - billing_postal_code
        - phone
        - items
      properties:
        name:
          type: string
        email:
          type: string
        delivery_address:
          type: string
        delivery_city:
          type: string
        delivery_postal_code:
          type: string
        billing_address:
          type: string
        billing_city:
          type: string
        billing_postal_code:
          type: string
        phone:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRequest'

    OrderItemRequest:
      type: object
      required:
        - product_id
        - quantity
      properties:
        product_id:
          type: integer
        quantity:
          type: integer

    Order:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        name:
          type: string
        email:
          type: string
        delivery_address:
          type: string
        delivery_city:
          type: string
        delivery_postal_code:
          type: string
        billing_address:
          type: string
        billing_city:
          type: string
        billing_postal_code:
          type: string
        phone:
          type: string
        status:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    OrderItem:
      type: object
      properties:
        id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        product:
          $ref: '#/components/schemas/Product'